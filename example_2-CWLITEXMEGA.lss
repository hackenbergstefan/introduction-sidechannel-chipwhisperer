
example_2-CWLITEXMEGA.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00802000  000007f6  0000088a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  0080200a  0080200a  00000894  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000368f  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026e2  00000000  00000000  0000401f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a63  00000000  00000000  00006701  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00007164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002003  00000000  00000000  00007490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cdd  00000000  00000000  00009493  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000a170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
   4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
   8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
   c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  14:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  40:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  4c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  50:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  54:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  58:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  5c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  60:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  64:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  68:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  6c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  70:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  74:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  78:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  7c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  80:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  84:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  88:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  8c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  90:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  94:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  98:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  9c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  a0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  a4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  a8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  ac:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  b0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  b4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  b8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  bc:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  c0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  c4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  c8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  cc:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  d0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  d4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  d8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  dc:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  e0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  e4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  e8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  ec:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  f0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  f4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  f8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
  fc:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 100:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 104:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 108:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 10c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 110:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 114:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 118:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 11c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 120:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 124:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 128:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 12c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 130:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 134:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 138:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 13c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 140:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 144:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 148:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 14c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 150:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 154:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 158:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 15c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 160:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 164:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 168:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 16c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 170:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 174:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 178:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 17c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 180:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 184:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 188:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 18c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 190:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 194:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 198:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 19c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1a0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1a4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1a8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1ac:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1b0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1b4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1b8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1bc:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1c0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
 1c4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 14 02 	jmp	0x428	; 0x428 <ss_get_commands>
 1cc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <check_password>
 1d0:	0c 94 01 02 	jmp	0x402	; 0x402 <check_version>

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	df e3       	ldi	r29, 0x3F	; 63
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	10 e2       	ldi	r17, 0x20	; 32
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b0 e2       	ldi	r27, 0x20	; 32
 1ea:	e6 ef       	ldi	r30, 0xF6	; 246
 1ec:	f7 e0       	ldi	r31, 0x07	; 7
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	aa 30       	cpi	r26, 0x0A	; 10
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	20 e2       	ldi	r18, 0x20	; 32
 200:	aa e0       	ldi	r26, 0x0A	; 10
 202:	b0 e2       	ldi	r27, 0x20	; 32
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	ac 35       	cpi	r26, 0x5C	; 92
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <main>
 212:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <_exit>

00000216 <__bad_interrupt>:
 216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <check_password>:
#include <string.h>

const uint8_t stored_password[] = "infineon";

uint8_t check_password(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *input)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	1f 92       	push	r1
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
    trigger_high();
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>

    uint8_t password_correct = 1;
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	a0 e0       	ldi	r26, 0x00	; 0
 22e:	b0 e2       	ldi	r27, 0x20	; 32
 230:	f9 01       	movw	r30, r18
    for (unsigned int i = 0; i < sizeof(stored_password) - 1; i++)
    {
        if (stored_password[i] != input[i])
 232:	9d 91       	ld	r25, X+
 234:	81 91       	ld	r24, Z+
 236:	98 17       	cp	r25, r24
 238:	11 f0       	breq	.+4      	; 0x23e <check_password+0x24>
        {
            password_correct = 0;
 23a:	19 82       	std	Y+1, r1	; 0x01
            break;
 23c:	04 c0       	rjmp	.+8      	; 0x246 <check_password+0x2c>
uint8_t check_password(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *input)
{
    trigger_high();

    uint8_t password_correct = 1;
    for (unsigned int i = 0; i < sizeof(stored_password) - 1; i++)
 23e:	80 e2       	ldi	r24, 0x20	; 32
 240:	a8 30       	cpi	r26, 0x08	; 8
 242:	b8 07       	cpc	r27, r24
 244:	b1 f7       	brne	.-20     	; 0x232 <check_password+0x18>
            password_correct = 0;
            break;
        }
    }

    trigger_low();
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>

    simpleserial_put(0x01, 1, &password_correct);
 24c:	ae 01       	movw	r20, r28
 24e:	4f 5f       	subi	r20, 0xFF	; 255
 250:	5f 4f       	sbci	r21, 0xFF	; 255
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 ac 01 	call	0x358	; 0x358 <simpleserial_put>
    return 0;
}
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 262:	fc 01       	movw	r30, r24
	unsigned int k = 0;
	uint8_t crc = 0x00;
 264:	80 e0       	ldi	r24, 0x00	; 0
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 266:	9d e4       	ldi	r25, 0x4D	; 77
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 268:	61 50       	subi	r22, 0x01	; 1
 26a:	70 f0       	brcs	.+28     	; 0x288 <ss_crc+0x26>
		crc ^= *buf++;
 26c:	21 91       	ld	r18, Z+
 26e:	82 27       	eor	r24, r18
 270:	28 e0       	ldi	r18, 0x08	; 8
 272:	30 e0       	ldi	r19, 0x00	; 0
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 274:	87 ff       	sbrs	r24, 7
 276:	03 c0       	rjmp	.+6      	; 0x27e <ss_crc+0x1c>
 278:	88 0f       	add	r24, r24
 27a:	89 27       	eor	r24, r25
 27c:	01 c0       	rjmp	.+2      	; 0x280 <ss_crc+0x1e>
 27e:	88 0f       	add	r24, r24
 280:	21 50       	subi	r18, 0x01	; 1
 282:	31 09       	sbc	r19, r1
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
 284:	b9 f7       	brne	.-18     	; 0x274 <ss_crc+0x12>
 286:	f0 cf       	rjmp	.-32     	; 0x268 <ss_crc+0x6>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 288:	08 95       	ret

0000028a <ss_puts>:
	uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t *);
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];

void ss_puts(char *x)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	do {
		putch(*x);
 290:	89 91       	ld	r24, Y+
 292:	0e 94 3c 03 	call	0x678	; 0x678 <output_ch_0>
	} while (*++x);
 296:	88 81       	ld	r24, Y
 298:	81 11       	cpse	r24, r1
 29a:	fa cf       	rjmp	.-12     	; 0x290 <ss_puts+0x6>
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 2a2:	ac 01       	movw	r20, r24
 2a4:	fc 01       	movw	r30, r24
 2a6:	31 96       	adiw	r30, 0x01	; 1
	uint8_t i = 1;
	uint8_t last = 0;
 2a8:	20 e0       	ldi	r18, 0x00	; 0

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
	uint8_t i = 1;
 2aa:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t last = 0;
	for (; i < len; i++) {
 2ac:	96 17       	cp	r25, r22
 2ae:	60 f4       	brcc	.+24     	; 0x2c8 <stuff_data+0x26>
		if (buf[i] == FRAME_BYTE) {
 2b0:	81 91       	ld	r24, Z+
 2b2:	81 11       	cpse	r24, r1
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <stuff_data+0x22>
			buf[last] = i - last;
 2b6:	da 01       	movw	r26, r20
 2b8:	a2 0f       	add	r26, r18
 2ba:	b1 1d       	adc	r27, r1
 2bc:	89 2f       	mov	r24, r25
 2be:	82 1b       	sub	r24, r18
 2c0:	8c 93       	st	X, r24
 2c2:	29 2f       	mov	r18, r25

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
	uint8_t i = 1;
	uint8_t last = 0;
	for (; i < len; i++) {
 2c4:	9f 5f       	subi	r25, 0xFF	; 255
 2c6:	f2 cf       	rjmp	.-28     	; 0x2ac <stuff_data+0xa>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret

000002cc <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 2cc:	fc 01       	movw	r30, r24
	uint8_t next = buf[0];
 2ce:	80 81       	ld	r24, Z
	buf[0] = 0x00;
 2d0:	10 82       	st	Z, r1
	//len -= 1;
	uint8_t tmp = next;
 2d2:	98 2f       	mov	r25, r24
	while ((next < len) && tmp != 0) {
 2d4:	86 17       	cp	r24, r22
 2d6:	48 f4       	brcc	.+18     	; 0x2ea <unstuff_data+0x1e>
 2d8:	99 23       	and	r25, r25
 2da:	39 f0       	breq	.+14     	; 0x2ea <unstuff_data+0x1e>
		tmp = buf[next];
 2dc:	df 01       	movw	r26, r30
 2de:	a8 0f       	add	r26, r24
 2e0:	b1 1d       	adc	r27, r1
 2e2:	9c 91       	ld	r25, X
		buf[next] = FRAME_BYTE;
 2e4:	1c 92       	st	X, r1
		next += tmp;
 2e6:	89 0f       	add	r24, r25
 2e8:	f5 cf       	rjmp	.-22     	; 0x2d4 <unstuff_data+0x8>
	}
	return next;
}
 2ea:	08 95       	ret

000002ec <simpleserial_addcmd>:
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS) {
 2ec:	20 91 5a 20 	lds	r18, 0x205A	; 0x80205a <num_commands>
 2f0:	30 91 5b 20 	lds	r19, 0x205B	; 0x80205b <num_commands+0x1>
 2f4:	20 31       	cpi	r18, 0x10	; 16
 2f6:	31 05       	cpc	r19, r1
 2f8:	14 f0       	brlt	.+4      	; 0x2fe <simpleserial_addcmd+0x12>
		putch('a');
 2fa:	81 e6       	ldi	r24, 0x61	; 97
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <simpleserial_addcmd+0x1a>
		return 1;
	}

	if(len >= MAX_SS_LEN) {
 2fe:	60 3c       	cpi	r22, 0xC0	; 192
 300:	71 05       	cpc	r23, r1
 302:	30 f0       	brcs	.+12     	; 0x310 <simpleserial_addcmd+0x24>
		putch('b');
 304:	82 e6       	ldi	r24, 0x62	; 98
 306:	0e 94 3c 03 	call	0x678	; 0x678 <output_ch_0>
		return 1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	08 95       	ret
	}

	commands[num_commands].c   = c;
 310:	95 e0       	ldi	r25, 0x05	; 5
 312:	92 9f       	mul	r25, r18
 314:	f0 01       	movw	r30, r0
 316:	93 9f       	mul	r25, r19
 318:	f0 0d       	add	r31, r0
 31a:	11 24       	eor	r1, r1
 31c:	e6 5f       	subi	r30, 0xF6	; 246
 31e:	ff 4d       	sbci	r31, 0xDF	; 223
 320:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 322:	61 83       	std	Z+1, r22	; 0x01
 324:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 326:	43 83       	std	Z+3, r20	; 0x03
 328:	54 83       	std	Z+4, r21	; 0x04
	num_commands++;
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	20 93 5a 20 	sts	0x205A, r18	; 0x80205a <num_commands>
 332:	30 93 5b 20 	sts	0x205B, r19	; 0x80205b <num_commands+0x1>

	return 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
}
 33a:	08 95       	ret

0000033c <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	52 e0       	ldi	r21, 0x02	; 2
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	86 e7       	ldi	r24, 0x76	; 118
 346:	0e 94 76 01 	call	0x2ec	; 0x2ec <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 34a:	44 e1       	ldi	r20, 0x14	; 20
 34c:	52 e0       	ldi	r21, 0x02	; 2
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	87 e7       	ldi	r24, 0x77	; 119
 354:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <simpleserial_addcmd>

00000358 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 358:	cf 92       	push	r12
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	c0 5c       	subi	r28, 0xC0	; 192
 36e:	d1 09       	sbc	r29, r1
 370:	cd bf       	out	0x3d, r28	; 61
 372:	de bf       	out	0x3e, r29	; 62
 374:	f6 2e       	mov	r15, r22
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 376:	19 82       	std	Y+1, r1	; 0x01
	data_buf[1] = c;
 378:	8a 83       	std	Y+2, r24	; 0x02
	data_buf[2] = size;
 37a:	6b 83       	std	Y+3, r22	; 0x03
 37c:	de 01       	movw	r26, r28
 37e:	14 96       	adiw	r26, 0x04	; 4
	int i = 0;
	for (; i < size; i++) {
 380:	fa 01       	movw	r30, r20
 382:	6d 01       	movw	r12, r26
 384:	06 2f       	mov	r16, r22
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	cf 01       	movw	r24, r30
 38a:	84 1b       	sub	r24, r20
 38c:	95 0b       	sbc	r25, r21
 38e:	80 17       	cp	r24, r16
 390:	91 07       	cpc	r25, r17
 392:	1c f4       	brge	.+6      	; 0x39a <simpleserial_put+0x42>
		data_buf[i + 3] = output[i];
 394:	81 91       	ld	r24, Z+
 396:	8d 93       	st	X+, r24
 398:	f7 cf       	rjmp	.-18     	; 0x388 <simpleserial_put+0x30>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 39a:	62 e0       	ldi	r22, 0x02	; 2
 39c:	6f 0d       	add	r22, r15
 39e:	ce 01       	movw	r24, r28
 3a0:	02 96       	adiw	r24, 0x02	; 2
 3a2:	0e 94 31 01 	call	0x262	; 0x262 <ss_crc>
 3a6:	f6 01       	movw	r30, r12
 3a8:	e0 0f       	add	r30, r16
 3aa:	f1 1f       	adc	r31, r17
 3ac:	80 83       	st	Z, r24
	data_buf[i + 4] = 0x00;
 3ae:	68 01       	movw	r12, r16
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	c8 0e       	add	r12, r24
 3b4:	d1 1c       	adc	r13, r1
 3b6:	8e 01       	movw	r16, r28
 3b8:	0f 5f       	subi	r16, 0xFF	; 255
 3ba:	1f 4f       	sbci	r17, 0xFF	; 255
 3bc:	f8 01       	movw	r30, r16
 3be:	ec 0d       	add	r30, r12
 3c0:	fd 1d       	adc	r31, r13
 3c2:	10 82       	st	Z, r1
	stuff_data(data_buf, i + 5);
 3c4:	65 e0       	ldi	r22, 0x05	; 5
 3c6:	6f 0d       	add	r22, r15
 3c8:	c8 01       	movw	r24, r16
 3ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 3ce:	78 01       	movw	r14, r16
 3d0:	c7 01       	movw	r24, r14
 3d2:	80 1b       	sub	r24, r16
 3d4:	91 0b       	sbc	r25, r17
 3d6:	c8 16       	cp	r12, r24
 3d8:	d9 06       	cpc	r13, r25
 3da:	34 f0       	brlt	.+12     	; 0x3e8 <simpleserial_put+0x90>
		putch(data_buf[i]);
 3dc:	f7 01       	movw	r30, r14
 3de:	81 91       	ld	r24, Z+
 3e0:	7f 01       	movw	r14, r30
 3e2:	0e 94 3c 03 	call	0x678	; 0x678 <output_ch_0>
 3e6:	f4 cf       	rjmp	.-24     	; 0x3d0 <simpleserial_put+0x78>
	}
}
 3e8:	c0 54       	subi	r28, 0x40	; 64
 3ea:	df 4f       	sbci	r29, 0xFF	; 255
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <check_version>:
}

#define FRAME_BYTE 0x00

uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	1f 92       	push	r1
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
	uint8_t ver = SS_VER;
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	89 83       	std	Y+1, r24	; 0x01
	simpleserial_put('r', 1, &ver);
 410:	ae 01       	movw	r20, r28
 412:	4f 5f       	subi	r20, 0xFF	; 255
 414:	5f 4f       	sbci	r21, 0xFF	; 255
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	82 e7       	ldi	r24, 0x72	; 114
 41a:	0e 94 ac 01 	call	0x358	; 0x358 <simpleserial_put>
	return SS_ERR_OK;
}
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0f 90       	pop	r0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <ss_get_commands>:

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	60 97       	sbiw	r28, 0x10	; 16
 432:	cd bf       	out	0x3d, r28	; 61
 434:	de bf       	out	0x3e, r29	; 62
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 436:	60 91 5a 20 	lds	r22, 0x205A	; 0x80205a <num_commands>
 43a:	70 91 5b 20 	lds	r23, 0x205B	; 0x80205b <num_commands+0x1>
 43e:	ab 01       	movw	r20, r22
 440:	55 27       	eor	r21, r21
 442:	20 e0       	ldi	r18, 0x00	; 0
        cmd_chars[i] = commands[i].c;
 444:	35 e0       	ldi	r19, 0x05	; 5
}

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 446:	82 2f       	mov	r24, r18
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	84 17       	cp	r24, r20
 44c:	95 07       	cpc	r25, r21
 44e:	8c f4       	brge	.+34     	; 0x472 <ss_get_commands+0x4a>
        cmd_chars[i] = commands[i].c;
 450:	a1 e0       	ldi	r26, 0x01	; 1
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	ac 0f       	add	r26, r28
 456:	bd 1f       	adc	r27, r29
 458:	a8 0f       	add	r26, r24
 45a:	b9 1f       	adc	r27, r25
 45c:	38 9f       	mul	r19, r24
 45e:	f0 01       	movw	r30, r0
 460:	39 9f       	mul	r19, r25
 462:	f0 0d       	add	r31, r0
 464:	11 24       	eor	r1, r1
 466:	e6 5f       	subi	r30, 0xF6	; 246
 468:	ff 4d       	sbci	r31, 0xDF	; 223
 46a:	80 81       	ld	r24, Z
 46c:	8c 93       	st	X, r24
}

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 46e:	2f 5f       	subi	r18, 0xFF	; 255
 470:	ea cf       	rjmp	.-44     	; 0x446 <ss_get_commands+0x1e>
        cmd_chars[i] = commands[i].c;
    }

    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 472:	ae 01       	movw	r20, r28
 474:	4f 5f       	subi	r20, 0xFF	; 255
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	82 e7       	ldi	r24, 0x72	; 114
 47a:	0e 94 ac 01 	call	0x358	; 0x358 <simpleserial_put>
    return 0x00;

}
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	60 96       	adiw	r28, 0x10	; 16
 482:	cd bf       	out	0x3d, r28	; 61
 484:	de bf       	out	0x3e, r29	; 62
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 48c:	5f 92       	push	r5
 48e:	6f 92       	push	r6
 490:	7f 92       	push	r7
 492:	8f 92       	push	r8
 494:	9f 92       	push	r9
 496:	af 92       	push	r10
 498:	bf 92       	push	r11
 49a:	cf 92       	push	r12
 49c:	df 92       	push	r13
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	c1 5c       	subi	r28, 0xC1	; 193
 4b0:	d1 09       	sbc	r29, r1
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	de bf       	out	0x3e, r29	; 62
	uint8_t data_buf[MAX_SS_LEN];
	uint8_t err = 0;
 4b6:	cf 53       	subi	r28, 0x3F	; 63
 4b8:	df 4f       	sbci	r29, 0xFF	; 255
 4ba:	18 82       	st	Y, r1
 4bc:	c1 5c       	subi	r28, 0xC1	; 193
 4be:	d0 40       	sbci	r29, 0x00	; 0
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	6c 01       	movw	r12, r24
 4c6:	7e 01       	movw	r14, r28
 4c8:	95 e0       	ldi	r25, 0x05	; 5
 4ca:	e9 0e       	add	r14, r25
 4cc:	f1 1c       	adc	r15, r1
 4ce:	86 01       	movw	r16, r12
 4d0:	37 01       	movw	r6, r14

	for (int i = 0; i < 4; i++) {
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 4d2:	0e 94 35 03 	call	0x66a	; 0x66a <input_ch_0>
 4d6:	f8 01       	movw	r30, r16
 4d8:	81 93       	st	Z+, r24
 4da:	8f 01       	movw	r16, r30
		if (data_buf[i] == FRAME_BYTE) {
 4dc:	81 11       	cpse	r24, r1
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <simpleserial_get+0x58>
			err = SS_ERR_FRAME_BYTE;
 4e0:	85 e0       	ldi	r24, 0x05	; 5
 4e2:	6d c0       	rjmp	.+218    	; 0x5be <simpleserial_get+0x132>
void simpleserial_get(void)
{
	uint8_t data_buf[MAX_SS_LEN];
	uint8_t err = 0;

	for (int i = 0; i < 4; i++) {
 4e4:	ee 15       	cp	r30, r14
 4e6:	ff 05       	cpc	r31, r15
 4e8:	a1 f7       	brne	.-24     	; 0x4d2 <simpleserial_get+0x46>
		if (data_buf[i] == FRAME_BYTE) {
			err = SS_ERR_FRAME_BYTE;
			goto ERROR;
		}
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);
 4ea:	64 e0       	ldi	r22, 0x04	; 4
 4ec:	c6 01       	movw	r24, r12
 4ee:	0e 94 66 01 	call	0x2cc	; 0x2cc <unstuff_data>
 4f2:	58 2e       	mov	r5, r24

	// check for valid command
	uint8_t c = 0;
	for(c = 0; c < num_commands; c++)
 4f4:	20 91 5a 20 	lds	r18, 0x205A	; 0x80205a <num_commands>
 4f8:	30 91 5b 20 	lds	r19, 0x205B	; 0x80205b <num_commands+0x1>
	{
		if(commands[c].c == data_buf[1])
 4fc:	9a 81       	ldd	r25, Y+2	; 0x02
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);

	// check for valid command
	uint8_t c = 0;
	for(c = 0; c < num_commands; c++)
 4fe:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(commands[c].c == data_buf[1])
 500:	45 e0       	ldi	r20, 0x05	; 5
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);

	// check for valid command
	uint8_t c = 0;
	for(c = 0; c < num_commands; c++)
 502:	a8 2e       	mov	r10, r24
 504:	b1 2c       	mov	r11, r1
 506:	a2 16       	cp	r10, r18
 508:	b3 06       	cpc	r11, r19
 50a:	64 f4       	brge	.+24     	; 0x524 <simpleserial_get+0x98>
	{
		if(commands[c].c == data_buf[1])
 50c:	4a 9d       	mul	r20, r10
 50e:	f0 01       	movw	r30, r0
 510:	4b 9d       	mul	r20, r11
 512:	f0 0d       	add	r31, r0
 514:	11 24       	eor	r1, r1
 516:	e6 5f       	subi	r30, 0xF6	; 246
 518:	ff 4d       	sbci	r31, 0xDF	; 223
 51a:	50 81       	ld	r21, Z
 51c:	59 17       	cp	r21, r25
 51e:	39 f0       	breq	.+14     	; 0x52e <simpleserial_get+0xa2>
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);

	// check for valid command
	uint8_t c = 0;
	for(c = 0; c < num_commands; c++)
 520:	8f 5f       	subi	r24, 0xFF	; 255
 522:	ef cf       	rjmp	.-34     	; 0x502 <simpleserial_get+0x76>
	{
		if(commands[c].c == data_buf[1])
			break;
	}

	if (c == num_commands) {
 524:	a2 16       	cp	r10, r18
 526:	b3 06       	cpc	r11, r19
 528:	11 f4       	brne	.+4      	; 0x52e <simpleserial_get+0xa2>
		err = SS_ERR_CMD;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	48 c0       	rjmp	.+144    	; 0x5be <simpleserial_get+0x132>
		goto ERROR;
	}

	//check that next frame not beyond end of message
	// account for cmd, scmd, len, data, crc, end of frame
	if ((data_buf[3] + 5) < next_frame) {
 52e:	8c 81       	ldd	r24, Y+4	; 0x04
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	05 96       	adiw	r24, 0x05	; 5
 534:	85 2c       	mov	r8, r5
 536:	91 2c       	mov	r9, r1
 538:	88 15       	cp	r24, r8
 53a:	99 05       	cpc	r25, r9
 53c:	4c f4       	brge	.+18     	; 0x550 <simpleserial_get+0xc4>
		err = SS_ERR_LEN;
 53e:	84 e0       	ldi	r24, 0x04	; 4
 540:	3e c0       	rjmp	.+124    	; 0x5be <simpleserial_get+0x132>

	// read in data
	// eq to len + crc + frame end
	int i = 4;
	for (; i < data_buf[3] + 5; i++) {
		data_buf[i] = getch();
 542:	0e 94 35 03 	call	0x66a	; 0x66a <input_ch_0>
 546:	f7 01       	movw	r30, r14
 548:	81 93       	st	Z+, r24
 54a:	7f 01       	movw	r14, r30
		if (data_buf[i] == FRAME_BYTE) {
 54c:	88 23       	and	r24, r24
 54e:	41 f2       	breq	.-112    	; 0x4e0 <simpleserial_get+0x54>
 550:	87 01       	movw	r16, r14
 552:	0c 19       	sub	r16, r12
 554:	1d 09       	sbc	r17, r13
	}

	// read in data
	// eq to len + crc + frame end
	int i = 4;
	for (; i < data_buf[3] + 5; i++) {
 556:	8c 81       	ldd	r24, Y+4	; 0x04
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	04 96       	adiw	r24, 0x04	; 4
 55c:	80 17       	cp	r24, r16
 55e:	91 07       	cpc	r25, r17
 560:	84 f7       	brge	.-32     	; 0x542 <simpleserial_get+0xb6>
			goto ERROR;
		}
	}

	//check that final byte is the FRAME_BYTE
	data_buf[i] = getch();
 562:	0e 94 35 03 	call	0x66a	; 0x66a <input_ch_0>
 566:	f6 01       	movw	r30, r12
 568:	e0 0f       	add	r30, r16
 56a:	f1 1f       	adc	r31, r17
 56c:	80 83       	st	Z, r24
	if (data_buf[i] != FRAME_BYTE) {
 56e:	81 11       	cpse	r24, r1
 570:	e6 cf       	rjmp	.-52     	; 0x53e <simpleserial_get+0xb2>
		err = SS_ERR_LEN;
		goto ERROR;
	}

	//fully unstuff data now
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 572:	60 2f       	mov	r22, r16
 574:	65 19       	sub	r22, r5
 576:	6f 5f       	subi	r22, 0xFF	; 255
 578:	c6 01       	movw	r24, r12
 57a:	88 0d       	add	r24, r8
 57c:	99 1d       	adc	r25, r9
 57e:	0e 94 66 01 	call	0x2cc	; 0x2cc <unstuff_data>

	//calc crc excluding original frame offset and frame end and crc
	uint8_t crc = ss_crc(data_buf+1, i-2);
 582:	6e ef       	ldi	r22, 0xFE	; 254
 584:	60 0f       	add	r22, r16
 586:	ce 01       	movw	r24, r28
 588:	02 96       	adiw	r24, 0x02	; 2
 58a:	0e 94 31 01 	call	0x262	; 0x262 <ss_crc>
	if (crc != data_buf[i-1]) {
 58e:	fe 01       	movw	r30, r28
 590:	e0 0f       	add	r30, r16
 592:	f1 1f       	adc	r31, r17
 594:	90 81       	ld	r25, Z
 596:	89 17       	cp	r24, r25
 598:	11 f0       	breq	.+4      	; 0x59e <simpleserial_get+0x112>
		err = SS_ERR_CRC;
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	10 c0       	rjmp	.+32     	; 0x5be <simpleserial_get+0x132>
		goto ERROR;
	}

	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	8a 9d       	mul	r24, r10
 5a2:	f0 01       	movw	r30, r0
 5a4:	8b 9d       	mul	r24, r11
 5a6:	f0 0d       	add	r31, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	e6 5f       	subi	r30, 0xF6	; 246
 5ac:	ff 4d       	sbci	r31, 0xDF	; 223
 5ae:	03 80       	ldd	r0, Z+3	; 0x03
 5b0:	f4 81       	ldd	r31, Z+4	; 0x04
 5b2:	e0 2d       	mov	r30, r0
 5b4:	93 01       	movw	r18, r6
 5b6:	4c 81       	ldd	r20, Y+4	; 0x04
 5b8:	6b 81       	ldd	r22, Y+3	; 0x03
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	19 95       	eicall
 5be:	cf 53       	subi	r28, 0x3F	; 63
 5c0:	df 4f       	sbci	r29, 0xFF	; 255
 5c2:	88 83       	st	Y, r24
 5c4:	c1 5c       	subi	r28, 0xC1	; 193
 5c6:	d0 40       	sbci	r29, 0x00	; 0

ERROR:
	simpleserial_put('e', 0x01, &err);
 5c8:	ae 01       	movw	r20, r28
 5ca:	4f 53       	subi	r20, 0x3F	; 63
 5cc:	5f 4f       	sbci	r21, 0xFF	; 255
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	85 e6       	ldi	r24, 0x65	; 101
 5d2:	0e 94 ac 01 	call	0x358	; 0x358 <simpleserial_put>
	return;
}
 5d6:	cf 53       	subi	r28, 0x3F	; 63
 5d8:	df 4f       	sbci	r29, 0xFF	; 255
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	bf 90       	pop	r11
 5f0:	af 90       	pop	r10
 5f2:	9f 90       	pop	r9
 5f4:	8f 90       	pop	r8
 5f6:	7f 90       	pop	r7
 5f8:	6f 90       	pop	r6
 5fa:	5f 90       	pop	r5
 5fc:	08 95       	ret

000005fe <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 5fe:	e0 e4       	ldi	r30, 0x40	; 64
 600:	f6 e0       	ldi	r31, 0x06	; 6
 602:	88 e0       	ldi	r24, 0x08	; 8
 604:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 606:	84 e0       	ldi	r24, 0x04	; 4
 608:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 60a:	e0 ea       	ldi	r30, 0xA0	; 160
 60c:	f8 e0       	ldi	r31, 0x08	; 8
 60e:	83 e0       	ldi	r24, 0x03	; 3
 610:	85 83       	std	Z+5, r24	; 0x05
	 *
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_1
	USART_Baudrate_Set(&USART, 1, 0);
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	86 83       	std	Z+6, r24	; 0x06
 616:	17 82       	std	Z+7, r1	; 0x07
	#else
	USART_Baudrate_Set(&USART, 11, 0);
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 618:	84 81       	ldd	r24, Z+4	; 0x04
 61a:	80 61       	ori	r24, 0x10	; 16
 61c:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 61e:	84 81       	ldd	r24, Z+4	; 0x04
 620:	88 60       	ori	r24, 0x08	; 8
 622:	84 83       	std	Z+4, r24	; 0x04
 624:	08 95       	ret

00000626 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	1f 92       	push	r1
 62c:	1f 92       	push	r1
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
 632:	69 83       	std	Y+1, r22	; 0x01
 634:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 63a:	49 81       	ldd	r20, Y+1	; 0x01
 63c:	5a 81       	ldd	r21, Y+2	; 0x02
 63e:	24 17       	cp	r18, r20
 640:	35 07       	cpc	r19, r21
 642:	69 f0       	breq	.+26     	; 0x65e <input_ch_w_timeout_0+0x38>
		{	
		if (USART_IsRXComplete(&USART))
 644:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 648:	47 ff       	sbrs	r20, 7
 64a:	06 c0       	rjmp	.+12     	; 0x658 <input_ch_w_timeout_0+0x32>
			{
			*data = USART_GetChar(&USART);
 64c:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18
			return BYTE_REC;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	04 c0       	rjmp	.+8      	; 0x660 <input_ch_w_timeout_0+0x3a>
			}
		timeout_counter++;
 658:	2f 5f       	subi	r18, 0xFF	; 255
 65a:	3f 4f       	sbci	r19, 0xFF	; 255
 65c:	ee cf       	rjmp	.-36     	; 0x63a <input_ch_w_timeout_0+0x14>
		}
		
	return TIMEOUT;
 65e:	80 e0       	ldi	r24, 0x00	; 0
	}
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	08 95       	ret

0000066a <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 66a:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 66e:	87 ff       	sbrs	r24, 7
 670:	fc cf       	rjmp	.-8      	; 0x66a <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 672:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	}
 676:	08 95       	ret

00000678 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 678:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 67c:	95 ff       	sbrs	r25, 5
 67e:	fc cf       	rjmp	.-8      	; 0x678 <output_ch_0>
	USART_PutChar(&USART, data);
 680:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
 684:	08 95       	ret

00000686 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 686:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 688:	60 83       	st	Z, r22
 68a:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 68c:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 68e:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 690:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 692:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 694:	15 86       	std	Z+13, r1	; 0x0d
 696:	08 95       	ret

00000698 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 698:	fc 01       	movw	r30, r24
 69a:	62 83       	std	Z+2, r22	; 0x02
 69c:	08 95       	ret

0000069e <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 69e:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 6a0:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 6a2:	26 85       	ldd	r18, Z+14	; 0x0e

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 6a4:	9f 5f       	subi	r25, 0xFF	; 255
 6a6:	93 70       	andi	r25, 0x03	; 3
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	92 13       	cpse	r25, r18
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <USART_TXBuffer_FreeSpace+0x12>
 6ae:	80 e0       	ldi	r24, 0x00	; 0
}
 6b0:	08 95       	ret

000006b2 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	ec 01       	movw	r28, r24
 6ba:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 6bc:	0e 94 4f 03 	call	0x69e	; 0x69e <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 6c0:	88 23       	and	r24, r24
 6c2:	79 f0       	breq	.+30     	; 0x6e2 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 6c4:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 6c6:	fe 01       	movw	r30, r28
 6c8:	e9 0f       	add	r30, r25
 6ca:	f1 1d       	adc	r31, r1
 6cc:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	93 70       	andi	r25, 0x03	; 3
 6d2:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 6d4:	e8 81       	ld	r30, Y
 6d6:	f9 81       	ldd	r31, Y+1	; 0x01
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 6da:	9c 7f       	andi	r25, 0xFC	; 252
 6dc:	2a 81       	ldd	r18, Y+2	; 0x02
 6de:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 6e0:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	08 95       	ret

000006ea <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 6ea:	fc 01       	movw	r30, r24
 6ec:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 6ee:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	29 13       	cpse	r18, r25
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <USART_RXBufferData_Available+0xe>
 6f6:	80 e0       	ldi	r24, 0x00	; 0
}
 6f8:	08 95       	ret

000006fa <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 6fa:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 6fc:	84 85       	ldd	r24, Z+12	; 0x0c
 6fe:	df 01       	movw	r26, r30
 700:	a8 0f       	add	r26, r24
 702:	b1 1d       	adc	r27, r1
 704:	13 96       	adiw	r26, 0x03	; 3
 706:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 708:	94 85       	ldd	r25, Z+12	; 0x0c
 70a:	9f 5f       	subi	r25, 0xFF	; 255
 70c:	93 70       	andi	r25, 0x03	; 3
 70e:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 710:	08 95       	ret

00000712 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 712:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 714:	83 85       	ldd	r24, Z+11	; 0x0b
 716:	8f 5f       	subi	r24, 0xFF	; 255
 718:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 71a:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 71c:	a0 81       	ld	r26, Z
 71e:	b1 81       	ldd	r27, Z+1	; 0x01
 720:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 722:	82 17       	cp	r24, r18
 724:	49 f0       	breq	.+18     	; 0x738 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 726:	23 85       	ldd	r18, Z+11	; 0x0b
 728:	df 01       	movw	r26, r30
 72a:	a2 0f       	add	r26, r18
 72c:	b1 1d       	adc	r27, r1
 72e:	13 96       	adiw	r26, 0x03	; 3
 730:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 732:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 738:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 73a:	08 95       	ret

0000073c <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 742:	96 85       	ldd	r25, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 744:	85 85       	ldd	r24, Z+13	; 0x0d
 746:	a0 81       	ld	r26, Z
 748:	b1 81       	ldd	r27, Z+1	; 0x01
 74a:	98 13       	cpse	r25, r24
 74c:	07 c0       	rjmp	.+14     	; 0x75c <USART_DataRegEmpty+0x20>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 74e:	13 96       	adiw	r26, 0x03	; 3
 750:	8c 91       	ld	r24, X
 752:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 754:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 756:	13 96       	adiw	r26, 0x03	; 3
 758:	8c 93       	st	X, r24
 75a:	0a c0       	rjmp	.+20     	; 0x770 <USART_DataRegEmpty+0x34>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 75c:	86 85       	ldd	r24, Z+14	; 0x0e
 75e:	ef 01       	movw	r28, r30
 760:	c8 0f       	add	r28, r24
 762:	d1 1d       	adc	r29, r1
 764:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 766:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 768:	86 85       	ldd	r24, Z+14	; 0x0e
 76a:	8f 5f       	subi	r24, 0xFF	; 255
 76c:	83 70       	andi	r24, 0x03	; 3
 76e:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 776:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 778:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 77a:	70 ff       	sbrs	r23, 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	01 c0       	rjmp	.+2      	; 0x784 <USART_NineBits_PutChar+0xe>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 782:	8e 7f       	andi	r24, 0xFE	; 254
 784:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 786:	60 83       	st	Z, r22
 788:	08 95       	ret

0000078a <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 78a:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 78c:	84 81       	ldd	r24, Z+4	; 0x04
 78e:	80 ff       	sbrs	r24, 0
 790:	04 c0       	rjmp	.+8      	; 0x79a <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 792:	80 81       	ld	r24, Z
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	91 60       	ori	r25, 0x01	; 1
 798:	08 95       	ret
	}else {
		return(usart->DATA);
 79a:	80 81       	ld	r24, Z
 79c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 79e:	08 95       	ret

000007a0 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 7a0:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
    OSC.PLLCTRL = 0x00;
 7a4:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 7a8:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
 7ac:	88 60       	ori	r24, 0x08	; 8
 7ae:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 7b2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 7b6:	83 ff       	sbrs	r24, 3
 7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 7ba:	88 ed       	ldi	r24, 0xD8	; 216
 7bc:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 7be:	83 e0       	ldi	r24, 0x03	; 3
 7c0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 7c4:	88 e0       	ldi	r24, 0x08	; 8
 7c6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
 7ca:	08 95       	ret

000007cc <main>:

int main(void)
{
    platform_init();
 7cc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <platform_init>
    init_uart();
 7d0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <init_uart0>
    trigger_setup();
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7de601>

    simpleserial_init();
 7da:	0e 94 9e 01 	call	0x33c	; 0x33c <simpleserial_init>
    simpleserial_addcmd(0x01, 0, check_password);
 7de:	4d e0       	ldi	r20, 0x0D	; 13
 7e0:	51 e0       	ldi	r21, 0x01	; 1
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	0e 94 76 01 	call	0x2ec	; 0x2ec <simpleserial_addcmd>
    while (1)
        simpleserial_get();
 7ec:	0e 94 46 02 	call	0x48c	; 0x48c <simpleserial_get>
 7f0:	fd cf       	rjmp	.-6      	; 0x7ec <main+0x20>

000007f2 <_exit>:
 7f2:	f8 94       	cli

000007f4 <__stop_program>:
 7f4:	ff cf       	rjmp	.-2      	; 0x7f4 <__stop_program>
